import { Link } from "react-router-dom";
import { usePromptStore } from "../stores/PromptStore";
import { useEffect } from "react";
import ConfettiExplosion from "react-confetti-explosion";
import { useImageStore } from "../stores/ImageStore";
import { useNavigate } from "react-router-dom";
import { useAuthStore } from "../stores/AuthStore";

const ResultPrompt = () => {
  const navigate = useNavigate();

  const prompt = usePromptStore((state) => state.prompt);
  const result = useImageStore((state) => state.result);

  const processImage = useImageStore((state) => state.processImage);
  const getImages = useAuthStore((state) => state.fetchMyImages);
  const resetResult = useImageStore((state) => state.resetResult);
  const tries = useAuthStore((state) => state.tries);

  if (!prompt.text || prompt.text === "") {
    return (
      <div className="flex flex-col justify-center items-center gap-2 h-screen">
        <h1 className="font-bold text-white">Result Prompt</h1>
        <p className="text-white">No hay prompt seleccionado</p>
        <Link className="btn btn-accent" to={"/"}>
          Volver al inicio
        </Link>
      </div>
    );
  }

  useEffect(() => {
    const controller = new AbortController();
    const signal = controller.signal;

    resetResult();

    processImage(signal)
      .then(() => {
        console.info("Prompt processed into an image");
        getImages();
      })
      .catch((error) => {
        console.error(error);

        // If reach maximum tries, redirect to start page
        if ([429, 401, 403].includes(error.status)) {
          alert(error.message);
          navigate("/start");
        }
      });

    return () => {
      controller.abort();
    };
  }, []);

  if (!result) {
    return (
      <div className="flex flex-col justify-center items-center gap-2 h-screen text-white">
        <p className="text-xl">Procesando</p>
        <span className="loading loading-infinity w-[5rem]"></span>
      </div>
    );
  }

  return (
    <div className="flex flex-col justify-center items-center gap-2 h-screen relative">
      <ConfettiExplosion
        force={0.8}
        duration={3000}
        particleCount={250}
        width={1600}
        zIndex={51}
        className="absolute left-1 top-3"
      />
      <h1 className="font-bold text-3xl text-accent">Felicidades, haz creado una nueva obra de arte!</h1>
      <p className="text-center text-secondary pb-4">"{prompt.text}"</p>
      <div className="bg-slate-500 w-[512px] h-[512px]">
        <img src={result.result.data.url} alt="Image generated by IA" width={512} height={512} />
      </div>
      <div className="flex items-center justify-center gap-2">
        <Link className="btn btn-accent mt-4" to={"/"}>
          Volver al inicio
        </Link>
        {tries < 3 && (
          <Link className="btn btn-gray text-black mt-4" to={"/choose-prompt"}>
            Volver a intentarlo
          </Link>
        )}
        <Link className="btn btn-secondary text-black mt-4" to={"/my-images"}>
          Ver mis imagenes
        </Link>
      </div>
      <ConfettiExplosion
        force={0.8}
        duration={3000}
        particleCount={250}
        width={1600}
        zIndex={51}
        className="absolute right-1 top-3"
      />
    </div>
  );
};

export default ResultPrompt;
